{"ast":null,"code":"class LibraryModel {\n  static async getLibrary(userName) {\n    const response = await fetch(`/api/library/${userName}`);\n    if (!response.ok) {\n      throw new Error('Library not found');\n    }\n    const data = await response.json();\n    return data;\n  }\n  static async saveLibrary(userName, library) {\n    await fetch(`/api/library/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(library)\n    });\n  }\n  static async addVideo(userName, video) {\n    const library = await LibraryModel.getLibrary(userName);\n    library.videos.push(video);\n    await LibraryModel.saveLibrary(userName, library);\n    console.log(`Video with ID: ${video.id} added to the library of user: ${library.name}`);\n  }\n  static async removeVideo(userName, videoId) {\n    const library = await LibraryModel.getLibrary(userName);\n    const videoIndex = library.videos.findIndex(video => video.id === videoId);\n    if (videoIndex !== -1) {\n      library.videos.splice(videoIndex, 1);\n      await LibraryModel.saveLibrary(userName, library);\n      console.log(`Video with ID: ${videoId} removed from the library of user: ${library.name}`);\n    } else {\n      console.log(`Video with ID: ${videoId} not found in the library of user: ${library.name}`);\n    }\n  }\n}\nexport default LibraryModel;","map":{"version":3,"names":["LibraryModel","getLibrary","userName","response","fetch","ok","Error","data","json","saveLibrary","library","method","headers","body","JSON","stringify","addVideo","video","videos","push","console","log","id","name","removeVideo","videoId","videoIndex","findIndex","splice"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/model/LibraryModel.ts"],"sourcesContent":["interface Video {\r\n  title: string;\r\n  id: string;\r\n}\r\n\r\ninterface UserLibrary {\r\n  name: string;\r\n  videos: Video[];\r\n}\r\n\r\nclass LibraryModel {\r\n  public static async getLibrary(userName: string): Promise<UserLibrary> {\r\n    const response = await fetch(`/api/library/${userName}`);\r\n    if (!response.ok) {\r\n      throw new Error('Library not found');\r\n    }\r\n    const data = await response.json();\r\n    return data as UserLibrary;\r\n  }\r\n\r\n  public static async saveLibrary(userName: string, library: UserLibrary): Promise<void> {\r\n    await fetch(`/api/library/${userName}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(library)\r\n    });\r\n  }\r\n\r\n  public static async addVideo(userName: string, video: Video): Promise<void> {\r\n    const library = await LibraryModel.getLibrary(userName);\r\n    library.videos.push(video);\r\n    await LibraryModel.saveLibrary(userName, library);\r\n    console.log(`Video with ID: ${video.id} added to the library of user: ${library.name}`);\r\n  }\r\n\r\n  public static async removeVideo(userName: string, videoId: string): Promise<void> {\r\n    const library = await LibraryModel.getLibrary(userName);\r\n    const videoIndex = library.videos.findIndex(video => video.id === videoId);\r\n\r\n    if (videoIndex !== -1) {\r\n      library.videos.splice(videoIndex, 1);\r\n      await LibraryModel.saveLibrary(userName, library);\r\n      console.log(`Video with ID: ${videoId} removed from the library of user: ${library.name}`);\r\n    } else {\r\n      console.log(`Video with ID: ${videoId} not found in the library of user: ${library.name}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LibraryModel;\r\n"],"mappings":"AAUA,MAAMA,YAAY,CAAC;EACjB,aAAoBC,UAAUA,CAACC,QAAgB,EAAwB;IACrE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgBF,QAAQ,EAAE,CAAC;IACxD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACtC;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb;EAEA,aAAoBE,WAAWA,CAACP,QAAgB,EAAEQ,OAAoB,EAAiB;IACrF,MAAMN,KAAK,CAAC,gBAAgBF,QAAQ,EAAE,EAAE;MACtCS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;EACJ;EAEA,aAAoBM,QAAQA,CAACd,QAAgB,EAAEe,KAAY,EAAiB;IAC1E,MAAMP,OAAO,GAAG,MAAMV,YAAY,CAACC,UAAU,CAACC,QAAQ,CAAC;IACvDQ,OAAO,CAACQ,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;IAC1B,MAAMjB,YAAY,CAACS,WAAW,CAACP,QAAQ,EAAEQ,OAAO,CAAC;IACjDU,OAAO,CAACC,GAAG,CAAC,kBAAkBJ,KAAK,CAACK,EAAE,kCAAkCZ,OAAO,CAACa,IAAI,EAAE,CAAC;EACzF;EAEA,aAAoBC,WAAWA,CAACtB,QAAgB,EAAEuB,OAAe,EAAiB;IAChF,MAAMf,OAAO,GAAG,MAAMV,YAAY,CAACC,UAAU,CAACC,QAAQ,CAAC;IACvD,MAAMwB,UAAU,GAAGhB,OAAO,CAACQ,MAAM,CAACS,SAAS,CAACV,KAAK,IAAIA,KAAK,CAACK,EAAE,KAAKG,OAAO,CAAC;IAE1E,IAAIC,UAAU,KAAK,CAAC,CAAC,EAAE;MACrBhB,OAAO,CAACQ,MAAM,CAACU,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;MACpC,MAAM1B,YAAY,CAACS,WAAW,CAACP,QAAQ,EAAEQ,OAAO,CAAC;MACjDU,OAAO,CAACC,GAAG,CAAC,kBAAkBI,OAAO,sCAAsCf,OAAO,CAACa,IAAI,EAAE,CAAC;IAC5F,CAAC,MAAM;MACLH,OAAO,CAACC,GAAG,CAAC,kBAAkBI,OAAO,sCAAsCf,OAAO,CAACa,IAAI,EAAE,CAAC;IAC5F;EACF;AACF;AAEA,eAAevB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}