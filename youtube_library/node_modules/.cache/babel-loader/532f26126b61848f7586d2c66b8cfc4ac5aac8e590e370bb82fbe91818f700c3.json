{"ast":null,"code":"class LibraryModel {\n  static async getLibrary(userName) {\n    const response = await fetch(`/api/library/${userName}`);\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      console.error(`Error fetching library: ${errorMessage}`);\n      throw new Error(`Library not found: ${errorMessage}`);\n    }\n    try {\n      const data = await response.json();\n      console.log('Fetched Library:', data); // Log the fetched library\n      return data;\n    } catch (error) {\n      console.error('Failed to parse JSON response:', error);\n      throw new Error('Invalid JSON response');\n    }\n  }\n  static async saveLibrary(userName, library) {\n    const response = await fetch(`/api/library/${userName}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(library)\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      console.error(`Error saving library: ${errorMessage}`);\n      throw new Error(`Failed to save library: ${errorMessage}`);\n    }\n    console.log('Library saved successfully:', library); // Log the saved library\n  }\n  static async addVideo(userName, video) {\n    try {\n      const library = await LibraryModel.getLibrary(userName);\n      library.videos.push(video);\n      await LibraryModel.saveLibrary(userName, library);\n      console.log(`Video with ID: ${video.id} added to the library of user: ${library.name}`);\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(`Error adding video: ${error.message}`);\n      } else {\n        console.error('Unexpected error', error);\n      }\n    }\n  }\n  static async removeVideo(userName, videoId) {\n    try {\n      const library = await LibraryModel.getLibrary(userName);\n      console.log('Library before removal:', library); // Log the library before removal\n      console.log('Video IDs in library:', library.videos.map(video => video.id)); // Log all video IDs\n      const videoIndex = library.videos.findIndex(video => video.id === videoId);\n      console.log('Found video index:', videoIndex); // Log the index found\n\n      if (videoIndex !== -1) {\n        library.videos.splice(videoIndex, 1);\n        await LibraryModel.saveLibrary(userName, library);\n        console.log(`Video with ID: ${videoId} removed from the library of user: ${library.name}`);\n      } else {\n        console.log(`Video with ID: ${videoId} not found in the library of user: ${library.name}`);\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(`Error removing video: ${error.message}`);\n      } else {\n        console.error('Unexpected error', error);\n      }\n    }\n  }\n}\nexport default LibraryModel;","map":{"version":3,"names":["LibraryModel","getLibrary","userName","response","fetch","ok","errorMessage","text","console","error","Error","data","json","log","saveLibrary","library","method","headers","body","JSON","stringify","addVideo","video","videos","push","id","name","message","removeVideo","videoId","map","videoIndex","findIndex","splice"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/model/LibraryModel.ts"],"sourcesContent":["interface Video {\r\n  title: string;\r\n  id: string;\r\n}\r\n\r\ninterface UserLibrary {\r\n  name: string;\r\n  videos: Video[];\r\n}\r\n\r\nclass LibraryModel {\r\n  public static async getLibrary(userName: string): Promise<UserLibrary> {\r\n    const response = await fetch(`/api/library/${userName}`);\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      console.error(`Error fetching library: ${errorMessage}`);\r\n      throw new Error(`Library not found: ${errorMessage}`);\r\n    }\r\n    try {\r\n      const data = await response.json();\r\n      console.log('Fetched Library:', data); // Log the fetched library\r\n      return data as UserLibrary;\r\n    } catch (error) {\r\n      console.error('Failed to parse JSON response:', error);\r\n      throw new Error('Invalid JSON response');\r\n    }\r\n  }\r\n\r\n  public static async saveLibrary(userName: string, library: UserLibrary): Promise<void> {\r\n    const response = await fetch(`/api/library/${userName}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(library)\r\n    });\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      console.error(`Error saving library: ${errorMessage}`);\r\n      throw new Error(`Failed to save library: ${errorMessage}`);\r\n    }\r\n    console.log('Library saved successfully:', library); // Log the saved library\r\n  }\r\n\r\n  public static async addVideo(userName: string, video: Video): Promise<void> {\r\n    try {\r\n      const library = await LibraryModel.getLibrary(userName);\r\n      library.videos.push(video);\r\n      await LibraryModel.saveLibrary(userName, library);\r\n      console.log(`Video with ID: ${video.id} added to the library of user: ${library.name}`);\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error) {\r\n        console.error(`Error adding video: ${error.message}`);\r\n      } else {\r\n        console.error('Unexpected error', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static async removeVideo(userName: string, videoId: string): Promise<void> {\r\n    try {\r\n      const library = await LibraryModel.getLibrary(userName);\r\n      console.log('Library before removal:', library); // Log the library before removal\r\n      console.log('Video IDs in library:', library.videos.map(video => video.id)); // Log all video IDs\r\n      const videoIndex = library.videos.findIndex(video => video.id === videoId);\r\n      console.log('Found video index:', videoIndex); // Log the index found\r\n\r\n      if (videoIndex !== -1) {\r\n        library.videos.splice(videoIndex, 1);\r\n        await LibraryModel.saveLibrary(userName, library);\r\n        console.log(`Video with ID: ${videoId} removed from the library of user: ${library.name}`);\r\n      } else {\r\n        console.log(`Video with ID: ${videoId} not found in the library of user: ${library.name}`);\r\n      }\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error) {\r\n        console.error(`Error removing video: ${error.message}`);\r\n      } else {\r\n        console.error('Unexpected error', error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default LibraryModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}