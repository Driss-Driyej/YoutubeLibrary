{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Driss\\\\OneDrive\\\\Documents\\\\Youtube_Library\\\\youtube_library\\\\src\\\\view\\\\VideoPlaybackView.tsx\";\nimport React from 'react';\nimport videoPlaybackModel from '../model/videoPlaybackModel';\nimport '../css/videoPlayback.css';\n\n// type de l'id de la video à visionner\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass VideoPlaybackView extends React.Component {\n  constructor(props) {\n    super(props);\n    // utilise checkVideoExists pour donner sa valeur renvoyé (true : vidéo existe, false : vidéo n'existe pas) à la variable videoExists\n    this.updateVideoExists = async () => {\n      const exists = await videoPlaybackModel.checkVideoExists(this.props.videoId);\n      this.setState({\n        videoExists: exists\n      });\n    };\n    this.state = {\n      videoExists: false\n    };\n  }\n  componentDidMount() {\n    this.updateVideoExists();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.videoId !== prevProps.videoId) {\n      this.updateVideoExists();\n    }\n  }\n  render() {\n    const {\n      videoExists\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [videoExists && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"videoTitle\",\n        children: this.props.videoTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this), videoExists ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n        id: \"videoIframe\",\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        title: \"YouTube video\",\n        src: `https://www.youtube.com/embed/${this.props.videoId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Vid\\xE9o non trouv\\xE9e\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default VideoPlaybackView;","map":{"version":3,"names":["React","videoPlaybackModel","jsxDEV","_jsxDEV","VideoPlaybackView","Component","constructor","props","updateVideoExists","exists","checkVideoExists","videoId","setState","videoExists","state","componentDidMount","componentDidUpdate","prevProps","render","children","className","videoTitle","fileName","_jsxFileName","lineNumber","columnNumber","id","frameBorder","allow","allowFullScreen","title","src"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/view/VideoPlaybackView.tsx"],"sourcesContent":["import React from 'react';\r\nimport videoPlaybackModel from '../model/videoPlaybackModel';\r\nimport '../css/videoPlayback.css';\r\n\r\n// type de l'id de la video à visionner\r\ninterface VideoPlaybackViewProps {\r\n  videoId: string;\r\n  videoTitle: string;\r\n}\r\n\r\ninterface VideoPlaybackViewState {\r\n  videoExists: boolean;\r\n}\r\n\r\nclass VideoPlaybackView extends React.Component<VideoPlaybackViewProps, VideoPlaybackViewState> {\r\n  constructor(props: VideoPlaybackViewProps) {\r\n    super(props);\r\n    this.state = {\r\n      videoExists: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateVideoExists();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: VideoPlaybackViewProps) {\r\n    if (this.props.videoId !== prevProps.videoId) {\r\n      this.updateVideoExists();\r\n    }\r\n  }\r\n\r\n  // utilise checkVideoExists pour donner sa valeur renvoyé (true : vidéo existe, false : vidéo n'existe pas) à la variable videoExists\r\n  updateVideoExists = async () => {\r\n    const exists = await videoPlaybackModel.checkVideoExists(this.props.videoId);\r\n    this.setState({ videoExists: exists });\r\n  };\r\n\r\n  render() {\r\n    const { videoExists } = this.state;\r\n    return (\r\n      <div>\r\n\r\n        {videoExists && <h1 className=\"videoTitle\">{this.props.videoTitle}</h1>}\r\n        {videoExists ? (\r\n          <iframe\r\n            id=\"videoIframe\"\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            title=\"YouTube video\"\r\n            src={`https://www.youtube.com/embed/${this.props.videoId}`}\r\n          ></iframe>\r\n        ) : (\r\n          <p>Vidéo non trouvée</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoPlaybackView;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA,MAAMC,iBAAiB,SAASJ,KAAK,CAACK,SAAS,CAAiD;EAC9FC,WAAWA,CAACC,KAA6B,EAAE;IACzC,KAAK,CAACA,KAAK,CAAC;IAgBd;IAAA,KACAC,iBAAiB,GAAG,YAAY;MAC9B,MAAMC,MAAM,GAAG,MAAMR,kBAAkB,CAACS,gBAAgB,CAAC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC;MAC5E,IAAI,CAACC,QAAQ,CAAC;QAAEC,WAAW,EAAEJ;MAAO,CAAC,CAAC;IACxC,CAAC;IAnBC,IAAI,CAACK,KAAK,GAAG;MACXD,WAAW,EAAE;IACf,CAAC;EACH;EAEAE,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACP,iBAAiB,CAAC,CAAC;EAC1B;EAEAQ,kBAAkBA,CAACC,SAAiC,EAAE;IACpD,IAAI,IAAI,CAACV,KAAK,CAACI,OAAO,KAAKM,SAAS,CAACN,OAAO,EAAE;MAC5C,IAAI,CAACH,iBAAiB,CAAC,CAAC;IAC1B;EACF;EAQAU,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEL;IAAY,CAAC,GAAG,IAAI,CAACC,KAAK;IAClC,oBACEX,OAAA;MAAAgB,QAAA,GAEGN,WAAW,iBAAIV,OAAA;QAAIiB,SAAS,EAAC,YAAY;QAAAD,QAAA,EAAE,IAAI,CAACZ,KAAK,CAACc;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACtEZ,WAAW,gBACVV,OAAA;QACEuB,EAAE,EAAC,aAAa;QAChBC,WAAW,EAAC,GAAG;QACfC,KAAK,EAAC,0FAA0F;QAChGC,eAAe;QACfC,KAAK,EAAC,eAAe;QACrBC,GAAG,EAAE,iCAAiC,IAAI,CAACxB,KAAK,CAACI,OAAO;MAAG;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,gBAEVtB,OAAA;QAAAgB,QAAA,EAAG;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACxB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;AAEA,eAAerB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}