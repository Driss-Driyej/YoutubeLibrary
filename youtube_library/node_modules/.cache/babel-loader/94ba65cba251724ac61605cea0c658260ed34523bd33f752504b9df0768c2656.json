{"ast":null,"code":"const API_KEY = 'AIzaSyBeCHn2Ewkv7K2-AomWOHFhXSkWadbR5O0';\nconst BASE_URL = 'https://www.googleapis.com/youtube/v3';\nclass videoPlaybackModel {\n  constructor() {\n    // envoie une requête à l'API YouTube pour vérifier si une vidéo existe, et retourne un booléen en conséquence\n    this.fetchVideoDetails = async videoId => {\n      const response = await fetch(`${BASE_URL}/videos?part=id&id=${videoId}&key=${API_KEY}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      return data.items.length > 0;\n    };\n    // fonction qui vérifie que la vidéo avec cet id existe\n    this.checkVideoExists = async videoId => {\n      try {\n        return await this.fetchVideoDetails(videoId);\n      } catch (error) {\n        console.error('Error fetching video details:', error);\n        return false;\n      }\n    };\n  }\n}\nexport default videoPlaybackModel;","map":{"version":3,"names":["API_KEY","BASE_URL","videoPlaybackModel","constructor","fetchVideoDetails","videoId","response","fetch","ok","Error","data","json","items","length","checkVideoExists","error","console"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/model/videoPlaybackModel.ts"],"sourcesContent":["const API_KEY = 'AIzaSyBeCHn2Ewkv7K2-AomWOHFhXSkWadbR5O0';\r\nconst BASE_URL = 'https://www.googleapis.com/youtube/v3';\r\n\r\ninterface VideoDetailsResponse {\r\n  items: Array<{\r\n    id: string;\r\n  }>;\r\n}\r\n\r\nclass videoPlaybackModel {\r\n// envoie une requête à l'API YouTube pour vérifier si une vidéo existe, et retourne un booléen en conséquence\r\n fetchVideoDetails = async (videoId: string): Promise<boolean> => {\r\n  const response = await fetch(`${BASE_URL}/videos?part=id&id=${videoId}&key=${API_KEY}`);\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n  const data: VideoDetailsResponse = await response.json();\r\n  return data.items.length > 0;\r\n};\r\n\r\n// fonction qui vérifie que la vidéo avec cet id existe\r\n checkVideoExists = async (videoId: string): Promise<boolean> => {\r\n  try {\r\n    return await this.fetchVideoDetails(videoId);\r\n  } catch (error) {\r\n    console.error('Error fetching video details:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n}\r\n\r\nexport default videoPlaybackModel;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,yCAAyC;AACzD,MAAMC,QAAQ,GAAG,uCAAuC;AAQxD,MAAMC,kBAAkB,CAAC;EAAAC,YAAA;IACzB;IAAA,KACCC,iBAAiB,GAAG,MAAOC,OAAe,IAAuB;MAChE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,sBAAsBI,OAAO,QAAQL,OAAO,EAAE,CAAC;MACvF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAA0B,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACxD,OAAOD,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC;IAC9B,CAAC;IAED;IAAA,KACCC,gBAAgB,GAAG,MAAOT,OAAe,IAAuB;MAC/D,IAAI;QACF,OAAO,MAAM,IAAI,CAACD,iBAAiB,CAACC,OAAO,CAAC;MAC9C,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,OAAO,KAAK;MACd;IACF,CAAC;EAAA;AAED;AAEA,eAAeb,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}