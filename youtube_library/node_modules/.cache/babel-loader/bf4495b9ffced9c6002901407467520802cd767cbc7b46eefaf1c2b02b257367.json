{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Driss\\\\OneDrive\\\\Documents\\\\Youtube_Library\\\\youtube_library\\\\src\\\\view\\\\SearchFormView.tsx\";\nimport React from 'react';\nimport SearchBarView from './SearchBarView';\nimport SearchResultsView from './SearchResultsView';\nimport YoutubeApiModel from '../model/YoutubeApiModel';\nimport '../css/searchForm.css';\n\n// Type de la variable d'état\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Composant qui affiche le formulaire de recherche\nclass SearchFormView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      results: [],\n      numResults: 5\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNumResultsChange = this.handleNumResultsChange.bind(this);\n  }\n\n  // Met à jour la variable d'état pour la recherche\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  // Met à jour la variable d'état pour le nombre de résultats\n  handleNumResultsChange(event) {\n    const numResults = parseInt(event.target.value, 10);\n    if (!isNaN(numResults)) {\n      this.setState({\n        numResults\n      });\n    }\n  }\n\n  // Applique la recherche de l'utilisateur en utilisant la fonction searchYouTube du model YoutubeApiModel\n  async handleSubmit(event) {\n    event.preventDefault();\n    const results = await YoutubeApiModel.searchYouTube(this.state.value); // donne en argument la valeur actuelle de la barre de recherche\n    this.setState({\n      results: results.slice(0, this.state.numResults)\n    }); // utilise la méthode slice pour prendre la partie du tableaux qu'on veut. Donc, de l'élément d'index 0 à numResults\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBarView, {\n        value: this.state.value,\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        numResults: this.state.numResults,\n        onNumResultsChange: this.handleNumResultsChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchResultsView, {\n        results: this.state.results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default SearchFormView;","map":{"version":3,"names":["React","SearchBarView","SearchResultsView","YoutubeApiModel","jsxDEV","_jsxDEV","SearchFormView","Component","constructor","props","state","value","results","numResults","handleChange","bind","handleSubmit","handleNumResultsChange","event","setState","target","parseInt","isNaN","preventDefault","searchYouTube","slice","render","className","children","onChange","onSubmit","onNumResultsChange","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/view/SearchFormView.tsx"],"sourcesContent":["import React from 'react';\r\nimport SearchBarView from './SearchBarView';\r\nimport SearchResultsView from './SearchResultsView';\r\nimport YoutubeApiModel from '../model/YoutubeApiModel';\r\nimport '../css/searchForm.css';\r\n\r\n// Type de la variable d'état\r\ninterface SearchFormViewState {\r\n    value: string;\r\n    results: any[]; // Il serait préférable de spécifier le type exact si possible\r\n    numResults: number;\r\n}\r\n\r\n// Composant qui affiche le formulaire de recherche\r\nclass SearchFormView extends React.Component<{}, SearchFormViewState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { value: '', results: [], numResults: 5 };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleNumResultsChange = this.handleNumResultsChange.bind(this);\r\n    }\r\n\r\n    // Met à jour la variable d'état pour la recherche\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    // Met à jour la variable d'état pour le nombre de résultats\r\n    handleNumResultsChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const numResults = parseInt(event.target.value, 10);\r\n        if (!isNaN(numResults)) {\r\n            this.setState({ numResults });\r\n        }\r\n    }\r\n\r\n    // Applique la recherche de l'utilisateur en utilisant la fonction searchYouTube du model YoutubeApiModel\r\n    async handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        const results = await YoutubeApiModel.searchYouTube(this.state.value); // donne en argument la valeur actuelle de la barre de recherche\r\n        this.setState({ results: results.slice(0, this.state.numResults) }); // utilise la méthode slice pour prendre la partie du tableaux qu'on veut. Donc, de l'élément d'index 0 à numResults\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-form-container\">\r\n                {/* Affiche la barre de recherche avec son bouton rechercher */}\r\n                <SearchBarView value={this.state.value} onChange={this.handleChange} onSubmit={this.handleSubmit} numResults={this.state.numResults} onNumResultsChange={this.handleNumResultsChange} />\r\n                {/* Affiche les résultats de la recherche */}\r\n                <SearchResultsView results={this.state.results} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchFormView;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAO,uBAAuB;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA;AACA,MAAMC,cAAc,SAASN,KAAK,CAACO,SAAS,CAA0B;EAClEC,WAAWA,CAACC,KAAS,EAAE;IACnB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAE,CAAC;IAEtD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACE,sBAAsB,GAAG,IAAI,CAACA,sBAAsB,CAACF,IAAI,CAAC,IAAI,CAAC;EACxE;;EAEA;EACAD,YAAYA,CAACI,KAA0C,EAAE;IACrD,IAAI,CAACC,QAAQ,CAAC;MAAER,KAAK,EAAEO,KAAK,CAACE,MAAM,CAACT;IAAM,CAAC,CAAC;EAChD;;EAEA;EACAM,sBAAsBA,CAACC,KAA0C,EAAE;IAC/D,MAAML,UAAU,GAAGQ,QAAQ,CAACH,KAAK,CAACE,MAAM,CAACT,KAAK,EAAE,EAAE,CAAC;IACnD,IAAI,CAACW,KAAK,CAACT,UAAU,CAAC,EAAE;MACpB,IAAI,CAACM,QAAQ,CAAC;QAAEN;MAAW,CAAC,CAAC;IACjC;EACJ;;EAEA;EACA,MAAMG,YAAYA,CAACE,KAAuC,EAAE;IACxDA,KAAK,CAACK,cAAc,CAAC,CAAC;IACtB,MAAMX,OAAO,GAAG,MAAMT,eAAe,CAACqB,aAAa,CAAC,IAAI,CAACd,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;IACvE,IAAI,CAACQ,QAAQ,CAAC;MAAEP,OAAO,EAAEA,OAAO,CAACa,KAAK,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAACG,UAAU;IAAE,CAAC,CAAC,CAAC,CAAC;EACzE;EAEAa,MAAMA,CAAA,EAAG;IACL,oBACIrB,OAAA;MAAKsB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBAElCvB,OAAA,CAACJ,aAAa;QAACU,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAM;QAACkB,QAAQ,EAAE,IAAI,CAACf,YAAa;QAACgB,QAAQ,EAAE,IAAI,CAACd,YAAa;QAACH,UAAU,EAAE,IAAI,CAACH,KAAK,CAACG,UAAW;QAACkB,kBAAkB,EAAE,IAAI,CAACd;MAAuB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAExL9B,OAAA,CAACH,iBAAiB;QAACU,OAAO,EAAE,IAAI,CAACF,KAAK,CAACE;MAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC;EAEd;AACJ;AAEA,eAAe7B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}