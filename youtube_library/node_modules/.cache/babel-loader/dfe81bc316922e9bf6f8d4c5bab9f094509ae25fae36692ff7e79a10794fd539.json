{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Driss\\\\OneDrive\\\\Documents\\\\Youtube_Library\\\\youtube_library\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport LibraryView from './view/LibraryView';\nimport MainPanelView from './view/MainPanelView';\nimport AppModel from './model/AppModel';\nimport './css/App.css';\n\n// types des éléments du tableau vidéos de la base de données\n\n// type du nom de l'utilisateur\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // L'etat de showSearchForm permet de savoir si on affiche le formulaire de recherche, si il est sur false on affiche la vidéo selectionné\n    this.state = {\n      showSearchForm: true,\n      videoSelected: null\n    };\n    this.displaySearchForm = this.displaySearchForm.bind(this);\n    this.displayVideo = this.displayVideo.bind(this);\n  }\n\n  // Affiche le formulaire de recherche. Appelé lorque l'utilisateur clique sur le bouton d'affichage du formulaire de recherche ([+]).\n  displaySearchForm(event) {\n    this.setState({\n      showSearchForm: true,\n      videoSelected: null\n    });\n  }\n\n  // Affiche la vidéo que l'utilisateur a séléctionné dans sa librairie\n  displayVideo(event, video) {\n    this.setState({\n      showSearchForm: false,\n      videoSelected: video\n    });\n  }\n  render() {\n    const {\n      showSearchForm,\n      videoSelected\n    } = this.state;\n    const {\n      username\n    } = this.props;\n    // Contient les vidéos que l'utilisateur a dans sa librairie\n    const userVideos = AppModel.getUserVideos({\n      username\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(LibraryView, {\n        username: username,\n        userVideos: userVideos,\n        displayFormOnClick: this.displaySearchForm,\n        libraryItemOnClick: this.displayVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainPanelView, {\n        showSearchForm: showSearchForm,\n        videoSelected: videoSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\n\n/*1 - Tu dois encore gérer l'état pour : les résultats de cette recherche, bibliothèsque de vidéo(en gros si j'enlève une vidéo de la bd de l'utilisateur, pas besoins de rafraîchir pour qu'elle n'apparaisse plus ).*/\n/*2 - Gère l'évènement de la barre de recherche et des boutons supprimer et ajouter un video*/","map":{"version":3,"names":["React","LibraryView","MainPanelView","AppModel","jsxDEV","_jsxDEV","App","Component","constructor","props","state","showSearchForm","videoSelected","displaySearchForm","bind","displayVideo","event","setState","video","render","username","userVideos","getUserVideos","className","children","displayFormOnClick","libraryItemOnClick","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/App.tsx"],"sourcesContent":["import React from 'react';\r\nimport LibraryView from './view/LibraryView';\r\nimport MainPanelView from './view/MainPanelView';\r\nimport AppModel from './model/AppModel';\r\nimport './css/App.css';\r\n\r\n// types des éléments du tableau vidéos de la base de données\r\ninterface video {\r\n  title: string;\r\n  id: string;\r\n}\r\n\r\n// type du nom de l'utilisateur\r\ninterface AppProps {\r\n  username: string;\r\n}\r\n\r\n\r\ninterface AppState {\r\n  showSearchForm: boolean;\r\n  videoSelected: video | null;\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n    // L'etat de showSearchForm permet de savoir si on affiche le formulaire de recherche, si il est sur false on affiche la vidéo selectionné\r\n    this.state = { showSearchForm: true, videoSelected: null};\r\n    this.displaySearchForm = this.displaySearchForm.bind(this);\r\n    this.displayVideo = this.displayVideo.bind(this);\r\n  }\r\n\r\n  // Affiche le formulaire de recherche. Appelé lorque l'utilisateur clique sur le bouton d'affichage du formulaire de recherche ([+]).\r\n  displaySearchForm(event: React.FormEvent<HTMLButtonElement>) {\r\n    this.setState({ showSearchForm: true, videoSelected: null });\r\n  }\r\n\r\n  // Affiche la vidéo que l'utilisateur a séléctionné dans sa librairie\r\n  displayVideo(event: React.FormEvent<HTMLButtonElement>, video: video) {\r\n    this.setState({ showSearchForm: false, videoSelected: video });\r\n  }\r\n\r\n  render() {\r\n    const { showSearchForm, videoSelected } = this.state;\r\n    const { username } = this.props;\r\n    // Contient les vidéos que l'utilisateur a dans sa librairie\r\n    const userVideos = AppModel.getUserVideos({ username });\r\n\r\n    return (\r\n      <div className=\"app-container\">\r\n        {/*Composant gauche de l'application. Il affiche : le nom de la librairie, le bouton d'affichage du formulaire, et les vidéos que l'utilisateur a dans sa librairie*/}\r\n        <LibraryView username={username} userVideos={userVideos} displayFormOnClick={this.displaySearchForm} libraryItemOnClick={this.displayVideo}/>\r\n        {/*Composant droit  de l'application. Il affiche (selon la valeur de la variable showSearchForm) : le formulaire de recherche ou la vidéo que l'utilisateur à selectionné (selon la variable videoSelected)*/}\r\n        <MainPanelView showSearchForm={showSearchForm} videoSelected={videoSelected} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*1 - Tu dois encore gérer l'état pour : les résultats de cette recherche, bibliothèsque de vidéo(en gros si j'enlève une vidéo de la bd de l'utilisateur, pas besoins de rafraîchir pour qu'elle n'apparaisse plus ).*/\r\n/*2 - Gère l'évènement de la barre de recherche et des boutons supprimer et ajouter un video*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,eAAe;;AAEtB;;AAMA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,GAAG,SAASN,KAAK,CAACO,SAAS,CAAqB;EACpDC,WAAWA,CAACC,KAAe,EAAE;IAC3B,KAAK,CAACA,KAAK,CAAC;IACZ;IACA,IAAI,CAACC,KAAK,GAAG;MAAEC,cAAc,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAI,CAAC;IACzD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;EAClD;;EAEA;EACAD,iBAAiBA,CAACG,KAAyC,EAAE;IAC3D,IAAI,CAACC,QAAQ,CAAC;MAAEN,cAAc,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;EAC9D;;EAEA;EACAG,YAAYA,CAACC,KAAyC,EAAEE,KAAY,EAAE;IACpE,IAAI,CAACD,QAAQ,CAAC;MAAEN,cAAc,EAAE,KAAK;MAAEC,aAAa,EAAEM;IAAM,CAAC,CAAC;EAChE;EAEAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAER,cAAc;MAAEC;IAAc,CAAC,GAAG,IAAI,CAACF,KAAK;IACpD,MAAM;MAAEU;IAAS,CAAC,GAAG,IAAI,CAACX,KAAK;IAC/B;IACA,MAAMY,UAAU,GAAGlB,QAAQ,CAACmB,aAAa,CAAC;MAAEF;IAAS,CAAC,CAAC;IAEvD,oBACEf,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAE5BnB,OAAA,CAACJ,WAAW;QAACmB,QAAQ,EAAEA,QAAS;QAACC,UAAU,EAAEA,UAAW;QAACI,kBAAkB,EAAE,IAAI,CAACZ,iBAAkB;QAACa,kBAAkB,EAAE,IAAI,CAACX;MAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAE7IzB,OAAA,CAACH,aAAa;QAACS,cAAc,EAAEA,cAAe;QAACC,aAAa,EAAEA;MAAc;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC;EAEV;AACF;AAEA,eAAexB,GAAG;;AAElB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}