{"ast":null,"code":"const API_KEY = 'AIzaSyCZw3WaVC2dETs93HWc9pAg1wu316tNnzg'; // clé API youtube\nconst BASE_URL = 'https://www.googleapis.com/youtube/v3'; // base de l'url pour accéder à l'API youtube\n\n// type des élément du tableaux reçu en réponse de l'API youtube\n\n// Regroupe les méthodes qui envoient une requête à l'API YouTube \nclass YoutubeApiModel {}\n//vérifie si une vidéo existe, et retourne un booléen en conséquence\nYoutubeApiModel.checkVideoExists = async videoId => {\n  try {\n    const response = await fetch(`${BASE_URL}/videos?part=id&id=${videoId}&key=${API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.items.length > 0;\n  } catch (error) {\n    console.error('Error checking video availability:', error);\n    return false;\n  }\n};\n// effectue une recherche sur YouTube en retournant les résultats de la recherche sous forme d'un tableau d'objets\nYoutubeApiModel.searchYouTube = async query => {\n  const response = await fetch(`${BASE_URL}/search?part=snippet&type=video&q=${query}&key=${API_KEY}`);\n  const data = await response.json();\n  return data.items;\n};\nexport default YoutubeApiModel;","map":{"version":3,"names":["API_KEY","BASE_URL","YoutubeApiModel","checkVideoExists","videoId","response","fetch","ok","Error","data","json","items","length","error","console","searchYouTube","query"],"sources":["C:/Users/Driss/OneDrive/Documents/Youtube_Library/youtube_library/src/model/YoutubeApiModel.ts"],"sourcesContent":["const API_KEY = 'AIzaSyCZw3WaVC2dETs93HWc9pAg1wu316tNnzg'; // clé API youtube\r\nconst BASE_URL = 'https://www.googleapis.com/youtube/v3'; // base de l'url pour accéder à l'API youtube\r\n\r\n// type des élément du tableaux reçu en réponse de l'API youtube\r\ninterface VideoResponse {\r\n  items: Array<{\r\n    id: string;\r\n  }>;\r\n}\r\n\r\n// Regroupe les méthodes qui envoient une requête à l'API YouTube \r\nclass YoutubeApiModel {\r\n  //vérifie si une vidéo existe, et retourne un booléen en conséquence\r\n  static checkVideoExists = async (videoId: string): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/videos?part=id&id=${videoId}&key=${API_KEY}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data: VideoResponse = await response.json();\r\n      return data.items.length > 0;\r\n    } catch (error) {\r\n      console.error('Error checking video availability:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // effectue une recherche sur YouTube en retournant les résultats de la recherche sous forme d'un tableau d'objets\r\n  static searchYouTube = async (query: string): Promise<any[]> => {\r\n    const response = await fetch(`${BASE_URL}/search?part=snippet&type=video&q=${query}&key=${API_KEY}`);\r\n    const data = await response.json();\r\n    return data.items;\r\n  };\r\n\r\n}\r\n\r\nexport default YoutubeApiModel;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,yCAAyC,CAAC,CAAC;AAC3D,MAAMC,QAAQ,GAAG,uCAAuC,CAAC,CAAC;;AAE1D;;AAOA;AACA,MAAMC,eAAe,CAAC;AACpB;AADIA,eAAe,CAEZC,gBAAgB,GAAG,MAAOC,OAAe,IAAuB;EACrE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,sBAAsBG,OAAO,QAAQJ,OAAO,EAAE,CAAC;IACvF,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAmB,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACjD,OAAOD,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,KAAK;EACd;AACF,CAAC;AAED;AAhBIX,eAAe,CAiBZa,aAAa,GAAG,MAAOC,KAAa,IAAqB;EAC9D,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,qCAAqCe,KAAK,QAAQhB,OAAO,EAAE,CAAC;EACpG,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,KAAK;AACnB,CAAC;AAIH,eAAeT,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}